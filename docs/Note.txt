=== SETUP ===
# Tạo môi trường mới tên là football với Python 3.10
conda create -n football python=3.10

# Kích hoạt môi trường mới
conda activate football

# Kiểm tra xem đã chuyển sang môi trường mới chưa
conda info --envs

# Cài đặt các thư viện cơ bản
pip install numpy pandas matplotlib opencv-python

# Cài đặt PyTorch (cho Mac M2)
pip install torch torchvision

# Cài đặt Ultralytics (YOLO) YOLOv11
pip install -U ultralytics

# Các thư viện khác có thể cần
pip install scikit-learn tqdm pyyaml

# Cài đặt ipykernel vào môi trường
conda install ipykernel

# Đăng ký môi trường với Jupyter
python -m ipykernel install --user --name=football

=== Chuẩn bị dữ liệu YOLO `scripts/prepare_yolo_dataset.py` ===
Tham số:
  --data-dir TEXT          Thư mục gốc chứa dữ liệu (mặc định: './data')
  --output-dir TEXT        Thư mục đầu ra cho dataset YOLO (mặc định: './dataset')
  --splits TEXT            Loại split cần xử lý: 'train', 'test' hoặc cả hai (mặc định: ['train'])
  --frame-interval INT     Chỉ lưu 1 frame sau mỗi N frames, khoảng cách càng lớn dataset càng nhỏ
                           (mặc định: 10)
  --val-split FLOAT        Tỷ lệ chia tập validation, 0.2 = 20% dữ liệu dành cho validation
                           (mặc định: 0.2)
  --resize-width INT       Chiều rộng để resize frame, nếu muốn giữ tỷ lệ gốc, chỉ định
                           một trong hai tham số này và để tham số còn lại là None
                           (mặc định: None - giữ nguyên kích thước)
  --resize-height INT      Chiều cao để resize frame
                           (mặc định: None - giữ nguyên kích thước)

Các câu lệnh ví dụ
# Trích xuất 10% frames từ videos trong tập train, chia thành 80% train và 20% validation
python scripts/prepare_yolo_dataset.py --splits train --frame-interval 10 --val-split 0.2 --output-dir ./dataset

# Resize về 1280x400 (giữ tỷ lệ gần đúng với 3840x1200)
python scripts/prepare_yolo_dataset.py --splits train --frame-interval 10 --val-split 0.2 --output-dir ./dataset --resize-width 1280 --resize-height 400

# Lấy mỗi frame thứ 30, tạo dataset nhỏ hơn
python scripts/prepare_yolo_dataset.py --splits train --frame-interval 30 --val-split 0.2 --output-dir ./dataset_small

==> Chạy cho dự án
python scripts/prepare_yolo_dataset.py --splits train --frame-interval 10 --val-split 0.2 --output-dir ./dataset
python scripts/prepare_yolo_dataset.py --splits test --frame-interval 10 --val-split 0 --output-dir ./dataset_test

=== Train detection ===

# Train basic
python src/detection/train_basic.py

# Train improve
python src/detection/train_improve1.py
python src/detection/train_improve2.py

# Evalute model
python src/detection/evalute_model.py

=== Train detection trên Kaggle ===
Sử dụng `src/detection/train_experiment.py` lấy kết quả phù hợp download về `models/exp_custom_model`


=== Chuẩn bị dữ liệu cho Image Classification `scripts/prepare_classification_dataset.py` ===
# Cơ bản 
python scripts/prepare_classification_dataset.py --data-dir ./data --frame-dir ./dataset/train/images --output-dir ./classification_dataset

# Với data augmentation và resize
python scripts/prepare_classification_dataset.py --data-dir ./data --frame-dir ./dataset/train/images --output-dir ./classification_dataset --augment --resize-width 128 --resize-height 128

# Xử lý partially_visible như visible (không phân vào class 0)
python scripts/prepare_classification_dataset.py --data-dir ./data --frame-dir ./dataset/train/images --output-dir ./classification_dataset --treat-partially-as-visible


=== Train Classification ===
# Kiểm thử dataset
python src/classification/datasets.py

# Kiểm thử model
python src/classification/models.py

# Tiến hành train
python src/classification/train.py

# Tiến hành đánh giá
python src/classification/evaluate.py --model_path ./models/classification/best.pt

Multiclass classification using resnet50